{
  "api/AzureServiceBusFlow.Abstractions.ICommandProducer-1.html": {
    "href": "api/AzureServiceBusFlow.Abstractions.ICommandProducer-1.html",
    "title": "Interface ICommandProducer<TCommand> | AzureServiceBusFlow",
    "summary": "Interface ICommandProducer<TCommand> Namespace AzureServiceBusFlow.Abstractions Assembly AzureServiceBusFlow.Configurations.dll public interface ICommandProducer<in TCommand> where TCommand : class, IServiceBusMessage Type Parameters TCommand Methods ProduceCommandAsync(TCommand, CancellationToken) Task ProduceCommandAsync(TCommand command, CancellationToken cancellationToken) Parameters command TCommand cancellationToken CancellationToken Returns Task"
  },
  "api/AzureServiceBusFlow.Abstractions.IEventProducer-1.html": {
    "href": "api/AzureServiceBusFlow.Abstractions.IEventProducer-1.html",
    "title": "Interface IEventProducer<TEvent> | AzureServiceBusFlow",
    "summary": "Interface IEventProducer<TEvent> Namespace AzureServiceBusFlow.Abstractions Assembly AzureServiceBusFlow.Configurations.dll public interface IEventProducer<in TEvent> where TEvent : class, IServiceBusMessage Type Parameters TEvent Methods ProduceEventAsync(TEvent, CancellationToken) Task ProduceEventAsync(TEvent @event, CancellationToken cancellationToken) Parameters event TEvent cancellationToken CancellationToken Returns Task"
  },
  "api/AzureServiceBusFlow.Abstractions.IMessageHandler-1.html": {
    "href": "api/AzureServiceBusFlow.Abstractions.IMessageHandler-1.html",
    "title": "Interface IMessageHandler<T> | AzureServiceBusFlow",
    "summary": "Interface IMessageHandler<T> Namespace AzureServiceBusFlow.Abstractions Assembly AzureServiceBusFlow.Configurations.dll public interface IMessageHandler<in T> Type Parameters T Methods HandleAsync(T, ServiceBusReceivedMessage, CancellationToken) Task HandleAsync(T message, ServiceBusReceivedMessage rawMessage, CancellationToken cancellationToken) Parameters message T rawMessage ServiceBusReceivedMessage cancellationToken CancellationToken Returns Task"
  },
  "api/AzureServiceBusFlow.Abstractions.IServiceBusMessage.html": {
    "href": "api/AzureServiceBusFlow.Abstractions.IServiceBusMessage.html",
    "title": "Interface IServiceBusMessage | AzureServiceBusFlow",
    "summary": "Interface IServiceBusMessage Namespace AzureServiceBusFlow.Abstractions Assembly AzureServiceBusFlow.Configurations.dll public interface IServiceBusMessage Properties CreatedDate DateTime CreatedDate { get; } Property Value DateTime RoutingKey string RoutingKey { get; } Property Value string"
  },
  "api/AzureServiceBusFlow.Abstractions.IServiceBusProducer-1.html": {
    "href": "api/AzureServiceBusFlow.Abstractions.IServiceBusProducer-1.html",
    "title": "Interface IServiceBusProducer<TMessage> | AzureServiceBusFlow",
    "summary": "Interface IServiceBusProducer<TMessage> Namespace AzureServiceBusFlow.Abstractions Assembly AzureServiceBusFlow.Configurations.dll public interface IServiceBusProducer<in TMessage> where TMessage : class, IServiceBusMessage Type Parameters TMessage Methods ProduceAsync(TMessage, CancellationToken) Task ProduceAsync(TMessage message, CancellationToken cancellationToken) Parameters message TMessage cancellationToken CancellationToken Returns Task"
  },
  "api/AzureServiceBusFlow.Abstractions.html": {
    "href": "api/AzureServiceBusFlow.Abstractions.html",
    "title": "Namespace AzureServiceBusFlow.Abstractions | AzureServiceBusFlow",
    "summary": "Namespace AzureServiceBusFlow.Abstractions Interfaces ICommandProducer<TCommand> IEventProducer<TEvent> IMessageHandler<T> IServiceBusMessage IServiceBusProducer<TMessage>"
  },
  "api/AzureServiceBusFlow.Builders.ServiceBusConfigurationBuilder.html": {
    "href": "api/AzureServiceBusFlow.Builders.ServiceBusConfigurationBuilder.html",
    "title": "Class ServiceBusConfigurationBuilder | AzureServiceBusFlow",
    "summary": "Class ServiceBusConfigurationBuilder Namespace AzureServiceBusFlow.Builders Assembly AzureServiceBusFlow.Configurations.dll Builder for configuring Azure Service Bus, allowing connection, producers, and consumers setup. public class ServiceBusConfigurationBuilder Inheritance object ServiceBusConfigurationBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ServiceBusConfigurationBuilder(IServiceCollection) Builder for configuring Azure Service Bus, allowing connection, producers, and consumers setup. public ServiceBusConfigurationBuilder(IServiceCollection services) Parameters services IServiceCollection Properties AzureServiceBusConfiguration The connection string used to connect to Azure Service Bus. public AzureServiceBusConfiguration AzureServiceBusConfiguration { get; } Property Value AzureServiceBusConfiguration Methods AddConsumer(Action<ServiceBusConsumerConfigurationBuilder>) Adds a consumer configuration via a callback. public ServiceBusConfigurationBuilder AddConsumer(Action<ServiceBusConsumerConfigurationBuilder> configure) Parameters configure Action<ServiceBusConsumerConfigurationBuilder> Action to configure the consumer, receives a specific builder. Returns ServiceBusConfigurationBuilder Returns the builder itself for method chaining. AddProducer<TMessage>(Action<ServiceBusProducerConfigurationBuilder<TMessage>>) Adds a producer for messages of type TMessage configured via a callback. public ServiceBusConfigurationBuilder AddProducer<TMessage>(Action<ServiceBusProducerConfigurationBuilder<TMessage>> configure) where TMessage : class, IServiceBusMessage Parameters configure Action<ServiceBusProducerConfigurationBuilder<TMessage>> Action to configure the producer, receives a specific builder. Returns ServiceBusConfigurationBuilder Returns the builder itself for method chaining. Type Parameters TMessage The type of message to produce, must implement IServiceBusMessage. Build() Validates the configuration and ensures required properties are set. public void Build() Exceptions InvalidOperationException Thrown when the connection string is not set. ConfigureAzureServiceBus(AzureServiceBusConfiguration) Sets the connection string that will be used for all Service Bus operations. public ServiceBusConfigurationBuilder ConfigureAzureServiceBus(AzureServiceBusConfiguration azureServiceBusConfiguration) Parameters azureServiceBusConfiguration AzureServiceBusConfiguration Returns ServiceBusConfigurationBuilder Returns the builder itself for method chaining."
  },
  "api/AzureServiceBusFlow.Builders.ServiceBusConsumerConfigurationBuilder.html": {
    "href": "api/AzureServiceBusFlow.Builders.ServiceBusConsumerConfigurationBuilder.html",
    "title": "Class ServiceBusConsumerConfigurationBuilder | AzureServiceBusFlow",
    "summary": "Class ServiceBusConsumerConfigurationBuilder Namespace AzureServiceBusFlow.Builders Assembly AzureServiceBusFlow.Configurations.dll public class ServiceBusConsumerConfigurationBuilder Inheritance object ServiceBusConsumerConfigurationBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ServiceBusConsumerConfigurationBuilder(AzureServiceBusConfiguration, IServiceCollection) public ServiceBusConsumerConfigurationBuilder(AzureServiceBusConfiguration _azureServiceBusConfiguration, IServiceCollection services) Parameters _azureServiceBusConfiguration AzureServiceBusConfiguration services IServiceCollection Methods AddHandler<TMessage, THandler>() public ServiceBusConsumerConfigurationBuilder AddHandler<TMessage, THandler>() where TMessage : class, IServiceBusMessage where THandler : class, IMessageHandler<TMessage> Returns ServiceBusConsumerConfigurationBuilder Type Parameters TMessage THandler Build() public void Build() EnsureSubscriptionExists(string, string) public ServiceBusConsumerConfigurationBuilder EnsureSubscriptionExists(string topicName, string subscriptionName) Parameters topicName string subscriptionName string Returns ServiceBusConsumerConfigurationBuilder FromQueue(string) public ServiceBusConsumerConfigurationBuilder FromQueue(string queueName) Parameters queueName string Returns ServiceBusConsumerConfigurationBuilder FromTopic(string, string) public ServiceBusConsumerConfigurationBuilder FromTopic(string topicName, string subscriptionName) Parameters topicName string subscriptionName string Returns ServiceBusConsumerConfigurationBuilder"
  },
  "api/AzureServiceBusFlow.Builders.ServiceBusProducerConfigurationBuilder-1.html": {
    "href": "api/AzureServiceBusFlow.Builders.ServiceBusProducerConfigurationBuilder-1.html",
    "title": "Class ServiceBusProducerConfigurationBuilder<TMessage> | AzureServiceBusFlow",
    "summary": "Class ServiceBusProducerConfigurationBuilder<TMessage> Namespace AzureServiceBusFlow.Builders Assembly AzureServiceBusFlow.Configurations.dll public class ServiceBusProducerConfigurationBuilder<TMessage> where TMessage : class, IServiceBusMessage Type Parameters TMessage Inheritance object ServiceBusProducerConfigurationBuilder<TMessage> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ServiceBusProducerConfigurationBuilder(AzureServiceBusConfiguration, IServiceCollection) public ServiceBusProducerConfigurationBuilder(AzureServiceBusConfiguration azureServiceBusConfiguration, IServiceCollection services) Parameters azureServiceBusConfiguration AzureServiceBusConfiguration services IServiceCollection Methods EnsureQueueExists(string) public ServiceBusProducerConfigurationBuilder<TMessage> EnsureQueueExists(string queueName) Parameters queueName string Returns ServiceBusProducerConfigurationBuilder<TMessage> EnsureTopicExists(string) public ServiceBusProducerConfigurationBuilder<TMessage> EnsureTopicExists(string topicName) Parameters topicName string Returns ServiceBusProducerConfigurationBuilder<TMessage> ToQueue(string) public ServiceBusProducerConfigurationBuilder<TMessage> ToQueue(string queueName) Parameters queueName string Returns ServiceBusProducerConfigurationBuilder<TMessage> ToTopic(string) public ServiceBusProducerConfigurationBuilder<TMessage> ToTopic(string topicName) Parameters topicName string Returns ServiceBusProducerConfigurationBuilder<TMessage> WithCommandProducer() public ServiceBusProducerConfigurationBuilder<TMessage> WithCommandProducer() Returns ServiceBusProducerConfigurationBuilder<TMessage> WithEventProducer() public ServiceBusProducerConfigurationBuilder<TMessage> WithEventProducer() Returns ServiceBusProducerConfigurationBuilder<TMessage> WithQueue(string) public ServiceBusProducerConfigurationBuilder<TMessage> WithQueue(string queue) Parameters queue string Returns ServiceBusProducerConfigurationBuilder<TMessage> WithTopic(string) public ServiceBusProducerConfigurationBuilder<TMessage> WithTopic(string topic) Parameters topic string Returns ServiceBusProducerConfigurationBuilder<TMessage>"
  },
  "api/AzureServiceBusFlow.Builders.html": {
    "href": "api/AzureServiceBusFlow.Builders.html",
    "title": "Namespace AzureServiceBusFlow.Builders | AzureServiceBusFlow",
    "summary": "Namespace AzureServiceBusFlow.Builders Classes ServiceBusConfigurationBuilder Builder for configuring Azure Service Bus, allowing connection, producers, and consumers setup. ServiceBusConsumerConfigurationBuilder ServiceBusProducerConfigurationBuilder<TMessage>"
  },
  "api/AzureServiceBusFlow.Extensions.AzureServiceBusExtensions.html": {
    "href": "api/AzureServiceBusFlow.Extensions.AzureServiceBusExtensions.html",
    "title": "Class AzureServiceBusExtensions | AzureServiceBusFlow",
    "summary": "Class AzureServiceBusExtensions Namespace AzureServiceBusFlow.Extensions Assembly AzureServiceBusFlow.Configurations.dll public static class AzureServiceBusExtensions Inheritance object AzureServiceBusExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddAzureServiceBus(IServiceCollection, Action<ServiceBusConfigurationBuilder>) public static IServiceCollection AddAzureServiceBus(this IServiceCollection services, Action<ServiceBusConfigurationBuilder> configure) Parameters services IServiceCollection configure Action<ServiceBusConfigurationBuilder> Returns IServiceCollection"
  },
  "api/AzureServiceBusFlow.Extensions.html": {
    "href": "api/AzureServiceBusFlow.Extensions.html",
    "title": "Namespace AzureServiceBusFlow.Extensions | AzureServiceBusFlow",
    "summary": "Namespace AzureServiceBusFlow.Extensions Classes AzureServiceBusExtensions"
  },
  "api/AzureServiceBusFlow.Hosts.ServiceBusConsumerHostedService.html": {
    "href": "api/AzureServiceBusFlow.Hosts.ServiceBusConsumerHostedService.html",
    "title": "Class ServiceBusConsumerHostedService | AzureServiceBusFlow",
    "summary": "Class ServiceBusConsumerHostedService Namespace AzureServiceBusFlow.Hosts Assembly AzureServiceBusFlow.Configurations.dll public class ServiceBusConsumerHostedService : IHostedService, IAsyncDisposable Inheritance object ServiceBusConsumerHostedService Implements IHostedService IAsyncDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ServiceBusConsumerHostedService(Func<ServiceBusReceivedMessage, IServiceProvider, CancellationToken, Task>, IServiceProvider, ILogger, AzureServiceBusConfiguration, string, string) public ServiceBusConsumerHostedService(Func<ServiceBusReceivedMessage, IServiceProvider, CancellationToken, Task> messageHandler, IServiceProvider serviceProvider, ILogger logger, AzureServiceBusConfiguration azureServiceBusConfiguration, string queueOrTopicName, string subscriptionName = null) Parameters messageHandler Func<ServiceBusReceivedMessage, IServiceProvider, CancellationToken, Task> serviceProvider IServiceProvider logger ILogger azureServiceBusConfiguration AzureServiceBusConfiguration queueOrTopicName string subscriptionName string Methods DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public ValueTask DisposeAsync() Returns ValueTask A task that represents the asynchronous dispose operation. StartAsync(CancellationToken) Triggered when the application host is ready to start the service. public Task StartAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Indicates that the start process has been aborted. Returns Task A Task that represents the asynchronous Start operation. StopAsync(CancellationToken) Triggered when the application host is performing a graceful shutdown. public Task StopAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Indicates that the shutdown process should no longer be graceful. Returns Task A Task that represents the asynchronous Stop operation."
  },
  "api/AzureServiceBusFlow.Hosts.html": {
    "href": "api/AzureServiceBusFlow.Hosts.html",
    "title": "Namespace AzureServiceBusFlow.Hosts | AzureServiceBusFlow",
    "summary": "Namespace AzureServiceBusFlow.Hosts Classes ServiceBusConsumerHostedService"
  },
  "api/AzureServiceBusFlow.Models.AzureServiceBusConfiguration.html": {
    "href": "api/AzureServiceBusFlow.Models.AzureServiceBusConfiguration.html",
    "title": "Class AzureServiceBusConfiguration | AzureServiceBusFlow",
    "summary": "Class AzureServiceBusConfiguration Namespace AzureServiceBusFlow.Models Assembly AzureServiceBusFlow.Configurations.dll public class AzureServiceBusConfiguration Inheritance object AzureServiceBusConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ConnectionString public required string ConnectionString { get; set; } Property Value string MaxAutoLockRenewalDurationInSeconds public int MaxAutoLockRenewalDurationInSeconds { get; set; } Property Value int MaxConcurrentCalls public int MaxConcurrentCalls { get; set; } Property Value int MaxRetryAttempts public int MaxRetryAttempts { get; set; } Property Value int ServiceBusReceiveMode public required ServiceBusReceiveMode ServiceBusReceiveMode { get; set; } Property Value ServiceBusReceiveMode"
  },
  "api/AzureServiceBusFlow.Models.html": {
    "href": "api/AzureServiceBusFlow.Models.html",
    "title": "Namespace AzureServiceBusFlow.Models | AzureServiceBusFlow",
    "summary": "Namespace AzureServiceBusFlow.Models Classes AzureServiceBusConfiguration"
  },
  "api/AzureServiceBusFlow.Producers.CommandProducer-1.html": {
    "href": "api/AzureServiceBusFlow.Producers.CommandProducer-1.html",
    "title": "Class CommandProducer<TCommand> | AzureServiceBusFlow",
    "summary": "Class CommandProducer<TCommand> Namespace AzureServiceBusFlow.Producers Assembly AzureServiceBusFlow.Configurations.dll public class CommandProducer<TCommand> : ICommandProducer<TCommand> where TCommand : class, IServiceBusMessage Type Parameters TCommand Inheritance object CommandProducer<TCommand> Implements ICommandProducer<TCommand> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandProducer(IServiceBusProducer<TCommand>) public CommandProducer(IServiceBusProducer<TCommand> producer) Parameters producer IServiceBusProducer<TCommand> Methods ProduceCommandAsync(TCommand, CancellationToken) public Task ProduceCommandAsync(TCommand command, CancellationToken cancellationToken) Parameters command TCommand cancellationToken CancellationToken Returns Task"
  },
  "api/AzureServiceBusFlow.Producers.EventProducer-1.html": {
    "href": "api/AzureServiceBusFlow.Producers.EventProducer-1.html",
    "title": "Class EventProducer<TEvent> | AzureServiceBusFlow",
    "summary": "Class EventProducer<TEvent> Namespace AzureServiceBusFlow.Producers Assembly AzureServiceBusFlow.Configurations.dll public class EventProducer<TEvent> : IEventProducer<TEvent> where TEvent : class, IServiceBusMessage Type Parameters TEvent Inheritance object EventProducer<TEvent> Implements IEventProducer<TEvent> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EventProducer(IServiceBusProducer<TEvent>) public EventProducer(IServiceBusProducer<TEvent> producer) Parameters producer IServiceBusProducer<TEvent> Methods ProduceEventAsync(TEvent, CancellationToken) public Task ProduceEventAsync(TEvent @event, CancellationToken cancellationToken) Parameters event TEvent cancellationToken CancellationToken Returns Task"
  },
  "api/AzureServiceBusFlow.Producers.ServiceBusProducer-1.html": {
    "href": "api/AzureServiceBusFlow.Producers.ServiceBusProducer-1.html",
    "title": "Class ServiceBusProducer<TMessage> | AzureServiceBusFlow",
    "summary": "Class ServiceBusProducer<TMessage> Namespace AzureServiceBusFlow.Producers Assembly AzureServiceBusFlow.Configurations.dll public class ServiceBusProducer<TMessage> : IServiceBusProducer<TMessage> where TMessage : class, IServiceBusMessage Type Parameters TMessage Inheritance object ServiceBusProducer<TMessage> Implements IServiceBusProducer<TMessage> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ServiceBusProducer(AzureServiceBusConfiguration, string, ILogger) public ServiceBusProducer(AzureServiceBusConfiguration azureServiceBusConfiguration, string queueOrTopicName, ILogger logger) Parameters azureServiceBusConfiguration AzureServiceBusConfiguration queueOrTopicName string logger ILogger Methods ProduceAsync(TMessage, CancellationToken) public Task ProduceAsync(TMessage message, CancellationToken cancellationToken) Parameters message TMessage cancellationToken CancellationToken Returns Task"
  },
  "api/AzureServiceBusFlow.Producers.html": {
    "href": "api/AzureServiceBusFlow.Producers.html",
    "title": "Namespace AzureServiceBusFlow.Producers | AzureServiceBusFlow",
    "summary": "Namespace AzureServiceBusFlow.Producers Classes CommandProducer<TCommand> EventProducer<TEvent> ServiceBusProducer<TMessage>"
  },
  "docs/creatingConsumers.html": {
    "href": "docs/creatingConsumers.html",
    "title": "| AzureServiceBusFlow",
    "summary": "Consumers AzureServiceBusFlow also simplify the creation of Consumers or MessageHandlers by implementing the IMessageHandler<> interface and passing the Message that will be consumed as the Type of the Handler. This interface provides the HandleAsync() method that is used to process the received message. \uD83D\uDEE0️ Creating a Consumer public class CommandExample1Handler : IMessageHandler<ExampleCommand1> { public Task HandleAsync(ExampleCommand1 message, ServiceBusReceivedMessage rawMessage, CancellationToken cancellationToken) { return Task.CompletedTask; } } The MessageHandler above consume a Message of type ExampleCommand1, created earlier in this documentation (ExampleCommand1). ⚙️ Registering Consumer To register the Consumer, aka MessageHandler, we need to use the AddConsumer() extension method in AddAzureServiceBus() configuration methon in Program.cs. the AddConsummer() method requires a Action of type ServiceBusConsumerConfigurationBuilder to configure the Consumer using this methods: FromQueue(): Defines the Queue this Consumer will be receiving messages. FromTopic(): Defines the Topic this Consumer will be receiving messages. EnsureSubscriptionExists(): Ensure that the subscription passed exists in AzureServiceBus, creates it if doesn`t exists. AddHandler<TMessage, TMessageHandler>(): Defines the Consumer / MessageHandler that is goint to consume a specific Message from a Queue or a Topic. More than one Consumer to the same Message, Queue or Topic can be defined in the same AddConsumer() This example shows the full configuration for: Registering a Message Creating a Producer for it Publishing in a specifi Queue Configuring 2 Consumers / MessageHandlers for the same Message Consuming this Message from the same Queue. builder.Services.AddAzureServiceBus(cfg => cfg .ConfigureAzureServiceBus(azureServiceBusConfig) .AddProducer<ExampleCommand1>(p => p .EnsureQueueExists(\"command-queue-one\") .WithCommandProducer() .ToQueue(\"command-queue-one\")) .AddConsumer(c => c .FromQueue(\"command-queue-one\") .AddHandler<ExampleCommand1, CommandExemple1Handler>() .AddHandler<ExampleCommand1, CommandExampleTwoHandlersPerOneMessageHandler>()) );"
  },
  "docs/creatingMessages.html": {
    "href": "docs/creatingMessages.html",
    "title": "| AzureServiceBusFlow",
    "summary": "Messages The AzureServiceBusFlow defines a standard approach for creating messages that will be published to the bus. This ensures that the MessageHandler receives the correct message type and processes it properly. ✉️ Creating Messages To create these messages, you need to define a record or class that implements IServiceBusMessage interface from the AzureServiceBusFlow package. public class ExampleCommand1 : IServiceBusMessage { public string RoutingKey => ExampleMessage.Id.ToString(); public DateTime CreatedDate => DateTime.UtcNow; public required ExampleMessage ExampleMessage { get; set; } } public class ExampleMessage { public Guid Id { get; set; } public string? Cliente { get; set; } public decimal Valor { get; set; } } The RoutingKey and CreatedDate properties are used internally by AzureServiceBusFlow, while ExampleMessage represents the actual content of the message being sent. The message above is just an example and the Content can be of any type, such as a class, record, struct, integer, string, IEnumerable... To register which messages will be sent to the bus, we need to configure the Producers to publish the messages. Check out the next page to know how to register it."
  },
  "docs/registeringProducers.html": {
    "href": "docs/registeringProducers.html",
    "title": "| AzureServiceBusFlow",
    "summary": "Producers To simplify the process of sending messages to Azure Service Bus, we created an abstraction that encapsulates the publishing logic. This approach keeps the implementation consistent and allows any type of message to be sent using the same pattern. ⚙️ Registering a Producer To register a producer and configure which message it will send, use the AddProducer() method inside the AddAzureServiceBus() configuration in Program.cs: builder.Services.AddAzureServiceBus(cfg => cfg .ConfigureAzureServiceBus(azureServiceBusConfig) .AddProducer<ExampleCommand1>(p => p .EnsureQueueExists(\"command-queue-one\") .WithCommandProducer() .ToQueue(\"command-queue-one\"))); The code above registers a producer for the ExampleCommand1 Message created earlier in this documentation (ExampleCommand1). EnsureQueueExists(): Ensures that the specified Queue exists in Azure Service Bus. If the Queue does not exist, it will be created automatically. WithCommandProducer(): Specifies that the producer is of type CommandProducer. Alternatively, you can configure an EventProducer or a CommandProducer, depending on the message type. ToQueue(): Defines the Queue where the message will be published. \uD83D\uDCE4 Publishing Messages Once the producer is configured, it can be used to publish messages to the bus. Here’s an example of how to do it. To publish a message using a CommandProducer, inject an instance of ICommandProducer and call ProduceCommandAsync(), passing the message as a parameter. [Route(\"api/commands\")] [ApiController] public class CommandController(ICommandProducer<ExampleCommand1> _producer) : ControllerBase { [HttpPost(\"command-example-one\")] public async Task<IActionResult> Example1(CancellationToken cancellationToken) { ExampleCommand1 command = new() { ExampleMessage = new ExampleMessage { Cliente = \"jose\", Id = Guid.NewGuid(), Valor = 1111 } }; await _producer.ProduceCommandAsync(command, cancellationToken); return Ok(); } } \uD83E\uDDED Summary \uD83D\uDCAC Message created \uD83D\uDCE4 Producer configured \uD83D\uDCEC Queue created and registred Next step: Create MessageHandler to consume and process the message."
  },
  "docs/settingUp.html": {
    "href": "docs/settingUp.html",
    "title": "| AzureServiceBusFlow",
    "summary": "\uD83D\uDCE6 Step 1: Install the NuGet Package Start by installing the AzureServiceBusFlow package from NuGet: dotnet add package AzureServiceBusFlow You can also find it on NuGet.org. This package contains all the necessary components to configure Producers / Consumers, register Queues / Topics and publish Messagens / Events to AzureServiceBus. ⚙️ Step 2: Configure the appsettings.json After installing the package, it's time to configure your appsettings.json file. You need to define the basic configuration for Azure Service Bus to work. Here’s a configuration example: \"AzureServiceBusConfigurationSettings\": { \"ConnectionString\": \"\", \"ServiceBusReceiveMode\": \"ReceiveAndDelete\", \"MaxAutoLockRenewalDurationInSeconds\": \"1800\", \"MaxConcurrentCalls\": \"10\", \"MaxRetryAttempts\": \"3\" } ConnectionString: The full connection string to your Azure Service Bus instance, typically in the format: Endpoint=sb://<your-servicebus-namespace-name>.servicebus.windows.net/;SharedAccessKeyName=<your-access-key-name>;SharedAccessKey=<your-access-key-value>. ServiceBusReceiveMode: Defines how messages are handled after being received. \"PeekLock\": The message is locked for processing and remains in the queue until it is explicitly completed or abandoned. If the receiver fails to complete the message within the lock duration, the message becomes available again for other receivers. \"ReceiveAndDelete\": The message is automatically removed from the queue as soon as it is received. MaxAutoLockRenewalDurationInSeconds: The maximum duration, in seconds, that the message lock will be automatically renewed while the message is being processed. MaxConcurrentCalls: Specifies the maximum number of messages that can be processed concurrently. MaxRetryAttempts: Defines the maximum number of retry attempts the message handler will perform to reprocess a message if an exception occurs. \uD83E\uDDE9 Step 3: Register AzureServiceBus in Program.cs Now that your appsettings.json is configured, it's time to enable AzureServiceBus in your application. Inside your Program.cs, register the AzureServiceBus in DI container with the AddAzureServiceBus extension method and set the configure method. builder.Services.AddAzureServiceBus(cfg => cfg .ConfigureAzureServiceBus(azureServiceBusConfig)); This method need a AzureServiceBusConfiguration instance to configure all the necessary properties to work with the Azure Service Bus. This configuration class is provided by AzureServiceBusFlow and its parameters are the same as the JSON object configured in ⚙️Step 2. At this time, no queues, topics, producers or consumers are configured and registered. This will be done in the next pages. \uD83D\uDCA1 I recommend you create a class called Settings and map the appsettings.json on this class, you can merge your personal appsettings config and also add the AzureServiceBusFlow properties that are required. For example: { \"Settings\": { \"AzureServiceBusConfigurationSettings\": { \"ConnectionString\": \"\", \"ServiceBusReceiveMode\": \"ReceiveAndDelete\", \"MaxAutoLockRenewalDurationInSeconds\": \"1800\", \"MaxConcurrentCalls\": \"10\", \"MaxRetryAttempts\": \"3\" } } } public class Settings { public AzureServiceBusConfiguration AzureServiceBusConfigurationSettings { get; } } var applicationSettings = builder.Configuration.GetSection(\"Settings\").Get<Settings>(); \uD83D\uDD12 Next Steps: Create Messages, Producers, Consumers, Queues and Topics. In the next step, we will explain how to create Messages and Producers that will publish to a specific queue or topic in Azure Service Bus."
  },
  "index.html": {
    "href": "index.html",
    "title": "AzureServiceBusFlow | AzureServiceBusFlow",
    "summary": "AzureServiceBusFlow AsbFlow is a lightweight and fluent integration library for Azure Service Bus, inspired by the configuration style of KafkaFlow. It simplifies the setup of producers, consumers, topics, queues, and subscriptions using a clean and extensible API. ✨ Features Fluent configuration for Azure Service Bus Automatic topic, queue, and subscription creation Support for producers and consumers Built-in dependency injection support Structured logging with ILogger \uD83D\uDE4C Contributors Meet the amazing people behind AzureServiceBusFlow! Connect with them on LinkedIn: Name LinkedIn Profile Felipe Mattioli Richard Garcia Miguel Totti Have ideas or improvements? Feel free to contribute by opening a Pull Request."
  }
}